{"env_info": "sys.platform: linux\nPython: 3.9.11 (main, Mar 29 2022, 19:08:29) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: Tesla T4\nCUDA_HOME: /root/miniconda3/envs/manhdq\nNVCC: Cuda compilation tools, release 11.3, V11.3.58\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.4.0\nMMCV: 1.5.3\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMDetection: 2.7.0+", "config": "optimizer = dict(type='Adam', lr=0.000625, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_mult = 8\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=10,\n    warmup_ratio=0.001,\n    step=[440, 544])\ntotal_epochs = 64\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'RetinaFaceDataset'\ndata_root = '/home/manhdq/ID_Card_Information_Extraction/datasets'\ntrain_root = '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color'\nval_root = '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid'\nimg_norm_cfg = dict(\n    mean=[127.5, 127.5, 127.5], std=[128.0, 128.0, 128.0], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(\n                type='Affine',\n                scale=None,\n                rotate=(-30, 30),\n                shear=None,\n                interpolation=0,\n                fit_output=True)\n        ],\n        p=0.1),\n    dict(type='ToGray', p=0.2)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n    dict(\n        type='RandomSquareCrop',\n        crop_choice=[0.3, 0.45, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0]),\n    dict(type='Resize', img_scale=(640, 640), keep_ratio=False),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical', 'diagonal']),\n    dict(\n        type='PhotoMetricDistortion',\n        brightness_delta=32,\n        contrast_range=(0.5, 1.5),\n        saturation_range=(0.5, 1.5),\n        hue_delta=18),\n    dict(\n        type='Normalize',\n        mean=[127.5, 127.5, 127.5],\n        std=[128.0, 128.0, 128.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_keypointss'\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(640, 640),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='Pad', size=(640, 640), pad_val=0),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=4,\n    train=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color/images',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n            dict(\n                type='RandomSquareCrop',\n                crop_choice=[\n                    0.3, 0.45, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0\n                ]),\n            dict(type='Resize', img_scale=(640, 640), keep_ratio=False),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical', 'diagonal']),\n            dict(\n                type='PhotoMetricDistortion',\n                brightness_delta=32,\n                contrast_range=(0.5, 1.5),\n                saturation_range=(0.5, 1.5),\n                hue_delta=18),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_keypointss'\n                ])\n        ]),\n    val=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(640, 640), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(640, 640), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nmodel = dict(\n    type='SCRFD',\n    backbone=dict(\n        type='MobileNetV1',\n        block_cfg=dict(\n            stage_blocks=(2, 3, 2, 6), stage_planes=[16, 16, 40, 72, 152,\n                                                     288])),\n    neck=dict(\n        type='PAFPN',\n        in_channels=[40, 72, 152, 288],\n        out_channels=16,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=3),\n    bbox_head=dict(\n        type='SCRFDHead',\n        num_classes=1,\n        in_channels=16,\n        stacked_convs=2,\n        feat_channels=64,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        cls_reg_share=True,\n        strides_share=False,\n        dw_conv=True,\n        scale_mode=0,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            scales=[1, 2],\n            base_sizes=[16, 64, 256],\n            strides=[8, 16, 32]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=False,\n        reg_max=8,\n        loss_bbox=dict(type='DIoULoss', loss_weight=1.0),\n        use_kps=True,\n        loss_kps=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0),\n        train_cfg=dict(\n            assigner=dict(type='ATSSAssigner', topk=9),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        test_cfg=dict(\n            nms_pre=-1,\n            min_bbox_size=0,\n            score_thr=0.02,\n            nms=dict(type='nms', iou_threshold=0.45),\n            max_per_img=-1)))\ntrain_cfg = dict(\n    assigner=dict(type='ATSSAssigner', topk=9),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=-1,\n    min_bbox_size=0,\n    score_thr=0.02,\n    nms=dict(type='nms', iou_threshold=0.45),\n    max_per_img=-1)\nepoch_multi = 1\nevaluation = dict(interval=5, metric='mAP')\nwork_dir = './work_dirs/scrfd_500m_bnkps'\ngpu_ids = range(0, 1)\n", "seed": 42, "exp_name": "scrfd_500m_bnkps.py"}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.06811, "loss_cls": 0.35517, "loss_bbox": 0.60151, "loss_kps": 39.78708, "loss": 40.74376, "time": 0.37119}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03372, "loss_cls": 0.54281, "loss_bbox": 0.38365, "loss_kps": 40.31106, "loss": 41.23752, "time": 0.35064}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03645, "loss_cls": 0.53059, "loss_bbox": 0.40008, "loss_kps": 38.71552, "loss": 39.64619, "time": 0.27618}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.03522, "loss_cls": 0.57645, "loss_bbox": 0.37445, "loss_kps": 39.08312, "loss": 40.03401, "time": 0.27181}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.03542, "loss_cls": 0.60285, "loss_bbox": 0.36914, "loss_kps": 37.52578, "loss": 38.49776, "time": 0.27301}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.03498, "loss_cls": 0.59007, "loss_bbox": 0.37674, "loss_kps": 37.67677, "loss": 38.64358, "time": 0.27313}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.03555, "loss_cls": 0.57614, "loss_bbox": 0.37625, "loss_kps": 37.40502, "loss": 38.35742, "time": 0.27573}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.03595, "loss_cls": 0.57265, "loss_bbox": 0.38445, "loss_kps": 36.31608, "loss": 37.27318, "time": 0.27433}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.0358, "loss_cls": 0.58048, "loss_bbox": 0.37434, "loss_kps": 37.05793, "loss": 38.01275, "time": 0.27514}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00063, "memory": 2017, "data_time": 0.03477, "loss_cls": 0.61916, "loss_bbox": 0.37168, "loss_kps": 37.21088, "loss": 38.20173, "time": 0.27341}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00063, "memory": 2017, "data_time": 0.03408, "loss_cls": 0.61059, "loss_bbox": 0.36915, "loss_kps": 35.61951, "loss": 36.59925, "time": 0.27034}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00063, "memory": 2017, "data_time": 0.03462, "loss_cls": 0.62567, "loss_bbox": 0.3631, "loss_kps": 34.97851, "loss": 35.96729, "time": 0.27145}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00063, "memory": 2017, "data_time": 0.03598, "loss_cls": 0.59202, "loss_bbox": 0.36586, "loss_kps": 33.70223, "loss": 34.66011, "time": 0.2768}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.06751, "loss_cls": 0.61158, "loss_bbox": 0.3608, "loss_kps": 33.34835, "loss": 34.32074, "time": 0.3088}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03575, "loss_cls": 0.61721, "loss_bbox": 0.3569, "loss_kps": 31.96138, "loss": 32.93548, "time": 0.27356}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03536, "loss_cls": 0.61618, "loss_bbox": 0.35762, "loss_kps": 31.71013, "loss": 32.68394, "time": 0.27227}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.03569, "loss_cls": 0.622, "loss_bbox": 0.3506, "loss_kps": 30.73196, "loss": 31.70456, "time": 0.27229}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.03644, "loss_cls": 0.62316, "loss_bbox": 0.3418, "loss_kps": 31.12859, "loss": 32.09355, "time": 0.27379}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.03642, "loss_cls": 0.62322, "loss_bbox": 0.3442, "loss_kps": 30.29975, "loss": 31.26717, "time": 0.27494}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.03631, "loss_cls": 0.62107, "loss_bbox": 0.34352, "loss_kps": 28.96597, "loss": 29.93056, "time": 0.27641}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.0376, "loss_cls": 0.63649, "loss_bbox": 0.33509, "loss_kps": 27.88061, "loss": 28.85219, "time": 0.27804}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.03568, "loss_cls": 0.62766, "loss_bbox": 0.33714, "loss_kps": 29.72169, "loss": 30.68649, "time": 0.27179}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.00063, "memory": 2017, "data_time": 0.03651, "loss_cls": 0.63923, "loss_bbox": 0.33121, "loss_kps": 29.88571, "loss": 30.85615, "time": 0.27483}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.00063, "memory": 2017, "data_time": 0.03668, "loss_cls": 0.63663, "loss_bbox": 0.33154, "loss_kps": 28.90402, "loss": 29.87219, "time": 0.27749}
