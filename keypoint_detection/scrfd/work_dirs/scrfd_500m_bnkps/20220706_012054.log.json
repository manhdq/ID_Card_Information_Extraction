{"env_info": "sys.platform: linux\nPython: 3.9.11 (main, Mar 29 2022, 19:08:29) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: Tesla T4\nCUDA_HOME: /root/miniconda3/envs/manhdq\nNVCC: Cuda compilation tools, release 11.3, V11.3.58\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.4.0\nMMCV: 1.5.3\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMDetection: 2.7.0+", "config": "optimizer = dict(type='Adam', lr=0.000625, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_mult = 8\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=10,\n    warmup_ratio=0.001,\n    step=[16, 48])\ntotal_epochs = 64\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/manhdq/ID_Card_Information_Extraction/keypoint_detection/scrfd/work_dirs/scrfd_500m_bnkps/epoch_64.pth'\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'RetinaFaceDataset'\ndata_root = '/home/manhdq/ID_Card_Information_Extraction/datasets'\ntrain_root = '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color'\nval_root = '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid'\nimg_norm_cfg = dict(\n    mean=[127.5, 127.5, 127.5], std=[128.0, 128.0, 128.0], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(\n                type='Affine',\n                scale=None,\n                rotate=(-30, 30),\n                shear=None,\n                interpolation=0,\n                fit_output=True)\n        ],\n        p=0.1),\n    dict(type='ToGray', p=0.2)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n    dict(\n        type='RandomSquareCrop',\n        crop_choice=[0.3, 0.45, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0]),\n    dict(type='Resize', img_scale=(640, 640), keep_ratio=False),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical', 'diagonal']),\n    dict(\n        type='PhotoMetricDistortion',\n        brightness_delta=32,\n        contrast_range=(0.5, 1.5),\n        saturation_range=(0.5, 1.5),\n        hue_delta=18),\n    dict(\n        type='Normalize',\n        mean=[127.5, 127.5, 127.5],\n        std=[128.0, 128.0, 128.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_keypointss'\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(640, 640),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='Pad', size=(640, 640), pad_val=0),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=8,\n    train=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color/images',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n            dict(\n                type='RandomSquareCrop',\n                crop_choice=[\n                    0.3, 0.45, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0\n                ]),\n            dict(type='Resize', img_scale=(640, 640), keep_ratio=False),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical', 'diagonal']),\n            dict(\n                type='PhotoMetricDistortion',\n                brightness_delta=32,\n                contrast_range=(0.5, 1.5),\n                saturation_range=(0.5, 1.5),\n                hue_delta=18),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_keypointss'\n                ])\n        ]),\n    val=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(640, 640), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(640, 640), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nmodel = dict(\n    type='SCRFD',\n    backbone=dict(\n        type='MobileNetV1',\n        block_cfg=dict(\n            stage_blocks=(2, 3, 2, 6), stage_planes=[16, 16, 40, 72, 152,\n                                                     288])),\n    neck=dict(\n        type='PAFPN',\n        in_channels=[40, 72, 152, 288],\n        out_channels=16,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=3),\n    bbox_head=dict(\n        type='SCRFDHead',\n        num_classes=1,\n        in_channels=16,\n        stacked_convs=2,\n        feat_channels=64,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        cls_reg_share=True,\n        strides_share=False,\n        dw_conv=True,\n        scale_mode=0,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            scales=[1, 2],\n            base_sizes=[16, 64, 256],\n            strides=[8, 16, 32]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=False,\n        reg_max=8,\n        loss_bbox=dict(type='DIoULoss', loss_weight=1.0),\n        use_kps=True,\n        loss_kps=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0),\n        train_cfg=dict(\n            assigner=dict(type='ATSSAssigner', topk=9),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        test_cfg=dict(\n            nms_pre=-1,\n            min_bbox_size=0,\n            score_thr=0.02,\n            nms=dict(type='nms', iou_threshold=0.45),\n            max_per_img=-1)))\ntrain_cfg = dict(\n    assigner=dict(type='ATSSAssigner', topk=9),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=-1,\n    min_bbox_size=0,\n    score_thr=0.02,\n    nms=dict(type='nms', iou_threshold=0.45),\n    max_per_img=-1)\nepoch_multi = 1\nevaluation = dict(interval=5, metric='mAP')\nwork_dir = './work_dirs/scrfd_500m_bnkps'\ngpu_ids = range(0, 1)\n", "seed": 42, "exp_name": "scrfd_500m_bnkps.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00063, "memory": 2017, "data_time": 0.10822, "loss_cls": 0.3227, "loss_bbox": 0.12707, "loss_kps": 4.49884, "loss": 4.94861, "time": 0.78138}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.03056, "loss_cls": 0.32334, "loss_bbox": 0.13586, "loss_kps": 4.72275, "loss": 5.18195, "time": 0.66077}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00063, "memory": 2017, "data_time": 0.03043, "loss_cls": 0.34913, "loss_bbox": 0.13016, "loss_kps": 5.29826, "loss": 5.77755, "time": 0.67558}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.02969, "loss_cls": 0.34321, "loss_bbox": 0.1304, "loss_kps": 4.65687, "loss": 5.13048, "time": 0.69509}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00063, "memory": 2017, "data_time": 0.03289, "loss_cls": 0.34748, "loss_bbox": 0.13161, "loss_kps": 4.79406, "loss": 5.27315, "time": 0.66369}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03061, "loss_cls": 0.34025, "loss_bbox": 0.13068, "loss_kps": 5.27256, "loss": 5.7435, "time": 0.64934}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00063, "memory": 2017, "data_time": 0.02975, "loss_cls": 0.34557, "loss_bbox": 0.12858, "loss_kps": 5.05155, "loss": 5.5257, "time": 0.67389}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.03226, "loss_cls": 0.34065, "loss_bbox": 0.13414, "loss_kps": 5.01882, "loss": 5.49361, "time": 0.66042}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00063, "memory": 2017, "data_time": 0.03233, "loss_cls": 0.33677, "loss_bbox": 0.1285, "loss_kps": 4.4335, "loss": 4.89878, "time": 0.70361}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.03108, "loss_cls": 0.35704, "loss_bbox": 0.12794, "loss_kps": 5.01693, "loss": 5.50191, "time": 0.67383}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00063, "memory": 2017, "data_time": 0.03399, "loss_cls": 0.34145, "loss_bbox": 0.13491, "loss_kps": 5.31686, "loss": 5.79322, "time": 0.6768}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.03196, "loss_cls": 0.33523, "loss_bbox": 0.13012, "loss_kps": 4.90212, "loss": 5.36747, "time": 0.69159}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00063, "memory": 2017, "data_time": 0.03338, "loss_cls": 0.34526, "loss_bbox": 0.13165, "loss_kps": 5.04459, "loss": 5.5215, "time": 0.67876}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.03202, "loss_cls": 0.33374, "loss_bbox": 0.13391, "loss_kps": 4.83796, "loss": 5.3056, "time": 0.66466}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00063, "memory": 2017, "data_time": 0.03094, "loss_cls": 0.34239, "loss_bbox": 0.13683, "loss_kps": 5.44673, "loss": 5.92594, "time": 0.67449}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.03026, "loss_cls": 0.34191, "loss_bbox": 0.13555, "loss_kps": 5.26981, "loss": 5.74727, "time": 0.66499}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00063, "memory": 2017, "data_time": 0.03366, "loss_cls": 0.35208, "loss_bbox": 0.13135, "loss_kps": 4.87421, "loss": 5.35764, "time": 0.68613}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.03049, "loss_cls": 0.34873, "loss_bbox": 0.13248, "loss_kps": 4.97327, "loss": 5.45448, "time": 0.68895}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00063, "memory": 2017, "data_time": 0.03265, "loss_cls": 0.33602, "loss_bbox": 0.1347, "loss_kps": 5.14542, "loss": 5.61615, "time": 0.65528}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00063, "memory": 2017, "data_time": 0.03004, "loss_cls": 0.35413, "loss_bbox": 0.13783, "loss_kps": 5.75598, "loss": 6.24794, "time": 0.69349}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00063, "memory": 2017, "data_time": 0.0323, "loss_cls": 0.35437, "loss_bbox": 0.13299, "loss_kps": 4.56181, "loss": 5.04917, "time": 0.67234}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00063, "memory": 2017, "data_time": 0.03116, "loss_cls": 0.35709, "loss_bbox": 0.13102, "loss_kps": 6.06461, "loss": 6.55271, "time": 0.69133}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00063, "memory": 2017, "data_time": 0.03129, "loss_cls": 0.34745, "loss_bbox": 0.13927, "loss_kps": 5.83169, "loss": 6.31841, "time": 0.69352}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00063, "memory": 2017, "data_time": 0.03075, "loss_cls": 0.35504, "loss_bbox": 0.13983, "loss_kps": 5.26634, "loss": 5.76122, "time": 0.66178}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00063, "memory": 2017, "data_time": 0.0334, "loss_cls": 0.33473, "loss_bbox": 0.13197, "loss_kps": 4.83842, "loss": 5.30513, "time": 0.68446}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00063, "memory": 2017, "data_time": 0.03078, "loss_cls": 0.33813, "loss_bbox": 0.13053, "loss_kps": 4.79969, "loss": 5.26834, "time": 0.694}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00063, "memory": 2017, "data_time": 0.10721, "loss_cls": 0.34355, "loss_bbox": 0.13591, "loss_kps": 5.53445, "loss": 6.01391, "time": 0.73214}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.03355, "loss_cls": 0.34269, "loss_bbox": 0.12837, "loss_kps": 4.32223, "loss": 4.7933, "time": 0.71268}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00063, "memory": 2017, "data_time": 0.03158, "loss_cls": 0.34273, "loss_bbox": 0.12647, "loss_kps": 4.68222, "loss": 5.15142, "time": 0.67493}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03126, "loss_cls": 0.33504, "loss_bbox": 0.13499, "loss_kps": 5.34449, "loss": 5.81452, "time": 0.63877}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00063, "memory": 2017, "data_time": 0.0329, "loss_cls": 0.33638, "loss_bbox": 0.13802, "loss_kps": 4.93289, "loss": 5.40729, "time": 0.6851}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03272, "loss_cls": 0.35992, "loss_bbox": 0.13424, "loss_kps": 5.48743, "loss": 5.98159, "time": 0.66846}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00063, "memory": 2017, "data_time": 0.03149, "loss_cls": 0.32624, "loss_bbox": 0.12675, "loss_kps": 4.67787, "loss": 5.13086, "time": 0.66958}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.0302, "loss_cls": 0.33956, "loss_bbox": 0.13046, "loss_kps": 5.16261, "loss": 5.63262, "time": 0.67231}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.00063, "memory": 2017, "data_time": 0.03231, "loss_cls": 0.33395, "loss_bbox": 0.12631, "loss_kps": 4.37342, "loss": 4.83368, "time": 0.69118}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.03069, "loss_cls": 0.33887, "loss_bbox": 0.1313, "loss_kps": 4.94986, "loss": 5.42003, "time": 0.67613}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.00063, "memory": 2017, "data_time": 0.03261, "loss_cls": 0.33962, "loss_bbox": 0.13242, "loss_kps": 5.33427, "loss": 5.80632, "time": 0.66034}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.02895, "loss_cls": 0.33785, "loss_bbox": 0.13095, "loss_kps": 4.55355, "loss": 5.02235, "time": 0.68628}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.00063, "memory": 2017, "data_time": 0.03063, "loss_cls": 0.32535, "loss_bbox": 0.12754, "loss_kps": 4.72763, "loss": 5.18052, "time": 0.6229}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.0319, "loss_cls": 0.32941, "loss_bbox": 0.1291, "loss_kps": 4.43879, "loss": 4.8973, "time": 0.45897}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.00063, "memory": 2017, "data_time": 0.04161, "loss_cls": 0.34909, "loss_bbox": 0.1343, "loss_kps": 5.26101, "loss": 5.74441, "time": 0.52904}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.02971, "loss_cls": 0.33812, "loss_bbox": 0.13157, "loss_kps": 5.48599, "loss": 5.95568, "time": 0.44058}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.00063, "memory": 2017, "data_time": 0.03399, "loss_cls": 0.33366, "loss_bbox": 0.13514, "loss_kps": 5.04173, "loss": 5.51053, "time": 0.46788}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.03305, "loss_cls": 0.35804, "loss_bbox": 0.13181, "loss_kps": 5.12693, "loss": 5.61678, "time": 0.47802}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.00063, "memory": 2017, "data_time": 0.03338, "loss_cls": 0.33772, "loss_bbox": 0.13388, "loss_kps": 5.10802, "loss": 5.57962, "time": 0.44061}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.00063, "memory": 2017, "data_time": 0.03137, "loss_cls": 0.34994, "loss_bbox": 0.13223, "loss_kps": 5.13519, "loss": 5.61736, "time": 0.44877}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.00063, "memory": 2017, "data_time": 0.03224, "loss_cls": 0.34453, "loss_bbox": 0.13051, "loss_kps": 4.68337, "loss": 5.1584, "time": 0.46971}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.00063, "memory": 2017, "data_time": 0.03853, "loss_cls": 0.33016, "loss_bbox": 0.13167, "loss_kps": 5.43579, "loss": 5.89762, "time": 0.48952}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 0.00063, "memory": 2017, "data_time": 0.03395, "loss_cls": 0.3452, "loss_bbox": 0.13442, "loss_kps": 5.65144, "loss": 6.13106, "time": 0.45677}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.00063, "memory": 2017, "data_time": 0.0356, "loss_cls": 0.33189, "loss_bbox": 0.13413, "loss_kps": 4.89672, "loss": 5.36274, "time": 0.47853}
{"mode": "train", "epoch": 2, "iter": 1250, "lr": 0.00063, "memory": 2017, "data_time": 0.03245, "loss_cls": 0.32926, "loss_bbox": 0.12791, "loss_kps": 4.62216, "loss": 5.07933, "time": 0.44573}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 0.00063, "memory": 2017, "data_time": 0.05883, "loss_cls": 0.34335, "loss_bbox": 0.13269, "loss_kps": 5.20311, "loss": 5.67914, "time": 0.46721}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00063, "memory": 2017, "data_time": 0.12603, "loss_cls": 0.33849, "loss_bbox": 0.13459, "loss_kps": 5.12736, "loss": 5.60044, "time": 0.5469}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.03196, "loss_cls": 0.33296, "loss_bbox": 0.13031, "loss_kps": 4.80631, "loss": 5.26958, "time": 0.44573}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.00063, "memory": 2017, "data_time": 0.04818, "loss_cls": 0.33563, "loss_bbox": 0.13597, "loss_kps": 5.1287, "loss": 5.6003, "time": 0.52209}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03467, "loss_cls": 0.35027, "loss_bbox": 0.1299, "loss_kps": 4.89545, "loss": 5.37561, "time": 0.43434}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00063, "memory": 2017, "data_time": 0.0328, "loss_cls": 0.3335, "loss_bbox": 0.12854, "loss_kps": 4.63685, "loss": 5.09888, "time": 0.45386}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.04009, "loss_cls": 0.33614, "loss_bbox": 0.13118, "loss_kps": 5.14448, "loss": 5.6118, "time": 0.49771}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.00063, "memory": 2017, "data_time": 0.0573, "loss_cls": 0.34361, "loss_bbox": 0.1288, "loss_kps": 4.92691, "loss": 5.39931, "time": 0.5168}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.05405, "loss_cls": 0.34289, "loss_bbox": 0.13449, "loss_kps": 5.05699, "loss": 5.53437, "time": 0.52502}
