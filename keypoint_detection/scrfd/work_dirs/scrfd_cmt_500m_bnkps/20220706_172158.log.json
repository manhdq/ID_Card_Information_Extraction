{"env_info": "sys.platform: linux\nPython: 3.9.11 (main, Mar 29 2022, 19:08:29) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: Tesla T4\nCUDA_HOME: /root/miniconda3/envs/manhdq\nNVCC: Cuda compilation tools, release 11.3, V11.3.58\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.4.0\nMMCV: 1.5.3\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMDetection: 2.7.0+", "config": "optimizer = dict(type='Adam', lr=0.000625, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_mult = 8\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=10,\n    warmup_ratio=0.001,\n    step=[16, 48])\ntotal_epochs = 64\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/manhdq/ID_Card_Information_Extraction/keypoint_detection/scrfd/work_dirs/scrfd_500m_bnkps/epoch_64.pth'\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'RetinaFaceDataset'\ndata_root = '/home/manhdq/ID_Card_Information_Extraction/datasets'\ntrain_root = '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color'\nval_root = '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid'\nimg_norm_cfg = dict(\n    mean=[127.5, 127.5, 127.5], std=[128.0, 128.0, 128.0], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(\n                type='Affine',\n                scale=None,\n                rotate=(-90, 90),\n                shear=None,\n                interpolation=0,\n                fit_output=True)\n        ],\n        p=0.6),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='MotionBlur'),\n            dict(type='GaussianBlur', blur_limit=3)\n        ],\n        p=0.2),\n    dict(type='ToGray', p=0.2)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n    dict(\n        type='RandomSquareCrop',\n        crop_choice=[0.3, 0.45, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0]),\n    dict(type='Resize', img_scale=(640, 640), keep_ratio=False),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical', 'diagonal']),\n    dict(\n        type='PhotoMetricDistortion',\n        brightness_delta=32,\n        contrast_range=(0.5, 1.5),\n        saturation_range=(0.5, 1.5),\n        hue_delta=18),\n    dict(\n        type='Normalize',\n        mean=[127.5, 127.5, 127.5],\n        std=[128.0, 128.0, 128.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_keypointss'\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(640, 640),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='Pad', size=(640, 640), pad_val=0),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=8,\n    train=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color/images',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(\n                                type='Affine',\n                                scale=None,\n                                rotate=(-90, 90),\n                                shear=None,\n                                interpolation=0,\n                                fit_output=True)\n                        ],\n                        p=0.6),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='MotionBlur'),\n                            dict(type='GaussianBlur', blur_limit=3)\n                        ],\n                        p=0.2),\n                    dict(type='ToGray', p=0.2)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.5),\n                keypoint_params=dict(type='KeypointParams', format='xy'),\n                refine_bbox_from_keypoint=True,\n                keymap=dict(\n                    img='image', gt_bboxes='bboxes',\n                    gt_keypointss='keypoints'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='RandomSquareCrop',\n                crop_choice=[\n                    0.3, 0.45, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0\n                ]),\n            dict(type='Resize', img_scale=(640, 640), keep_ratio=False),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical', 'diagonal']),\n            dict(\n                type='PhotoMetricDistortion',\n                brightness_delta=32,\n                contrast_range=(0.5, 1.5),\n                saturation_range=(0.5, 1.5),\n                hue_delta=18),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_keypointss'\n                ])\n        ]),\n    val=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(640, 640), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(640, 640), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nmodel = dict(\n    type='SCRFD',\n    backbone=dict(\n        type='MobileNetV1',\n        block_cfg=dict(\n            stage_blocks=(2, 3, 2, 6), stage_planes=[16, 16, 40, 72, 152,\n                                                     288])),\n    neck=dict(\n        type='PAFPN',\n        in_channels=[40, 72, 152, 288],\n        out_channels=16,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=3),\n    bbox_head=dict(\n        type='SCRFDHead',\n        num_classes=1,\n        in_channels=16,\n        stacked_convs=2,\n        feat_channels=64,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        cls_reg_share=True,\n        strides_share=False,\n        dw_conv=True,\n        scale_mode=0,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            scales=[1, 2],\n            base_sizes=[16, 64, 256],\n            strides=[8, 16, 32]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=False,\n        reg_max=8,\n        loss_bbox=dict(type='DIoULoss', loss_weight=1.0),\n        use_kps=True,\n        loss_kps=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.5),\n        train_cfg=dict(\n            assigner=dict(type='ATSSAssigner', topk=9),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        test_cfg=dict(\n            nms_pre=-1,\n            min_bbox_size=0,\n            score_thr=0.02,\n            nms=dict(type='nms', iou_threshold=0.45),\n            max_per_img=-1)))\ntrain_cfg = dict(\n    assigner=dict(type='ATSSAssigner', topk=9),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=-1,\n    min_bbox_size=0,\n    score_thr=0.02,\n    nms=dict(type='nms', iou_threshold=0.45),\n    max_per_img=-1)\nepoch_multi = 1\nevaluation = dict(interval=5, metric='mAP')\nwork_dir = './work_dirs/scrfd_cmt_500m_bnkps'\ngpu_ids = range(0, 1)\n", "seed": 42, "exp_name": "scrfd_cmt_500m_bnkps.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00063, "memory": 2017, "data_time": 0.11164, "loss_cls": 0.33698, "loss_bbox": 0.1484, "loss_kps": 7.24073, "loss": 7.7261, "time": 0.34914}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.03448, "loss_cls": 0.3346, "loss_bbox": 0.1541, "loss_kps": 7.74924, "loss": 8.23794, "time": 0.27364}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00063, "memory": 2017, "data_time": 0.03498, "loss_cls": 0.32638, "loss_bbox": 0.15127, "loss_kps": 7.3971, "loss": 7.87475, "time": 0.27861}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03534, "loss_cls": 0.32962, "loss_bbox": 0.15713, "loss_kps": 7.7332, "loss": 8.21995, "time": 0.27638}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00063, "memory": 2017, "data_time": 0.03429, "loss_cls": 0.34698, "loss_bbox": 0.15187, "loss_kps": 7.51033, "loss": 8.00918, "time": 0.27133}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03361, "loss_cls": 0.34022, "loss_bbox": 0.14825, "loss_kps": 7.66766, "loss": 8.15613, "time": 0.27122}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00063, "memory": 2017, "data_time": 0.03543, "loss_cls": 0.32912, "loss_bbox": 0.15426, "loss_kps": 7.89489, "loss": 8.37827, "time": 0.27865}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.03642, "loss_cls": 0.33031, "loss_bbox": 0.14785, "loss_kps": 6.76976, "loss": 7.24792, "time": 0.27659}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00063, "memory": 2017, "data_time": 0.03286, "loss_cls": 0.33751, "loss_bbox": 0.15213, "loss_kps": 8.04509, "loss": 8.53473, "time": 0.27141}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.0353, "loss_cls": 0.34127, "loss_bbox": 0.14877, "loss_kps": 7.49239, "loss": 7.98243, "time": 0.27566}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00063, "memory": 2017, "data_time": 0.036, "loss_cls": 0.34493, "loss_bbox": 0.14832, "loss_kps": 6.92481, "loss": 7.41806, "time": 0.27497}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.0366, "loss_cls": 0.35137, "loss_bbox": 0.15229, "loss_kps": 7.56748, "loss": 8.07115, "time": 0.28095}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00063, "memory": 2017, "data_time": 0.03498, "loss_cls": 0.3723, "loss_bbox": 0.15137, "loss_kps": 7.55321, "loss": 8.07688, "time": 0.27654}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.03739, "loss_cls": 0.34005, "loss_bbox": 0.15164, "loss_kps": 7.72293, "loss": 8.21462, "time": 0.28126}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00063, "memory": 2017, "data_time": 0.03598, "loss_cls": 0.36343, "loss_bbox": 0.1501, "loss_kps": 7.87283, "loss": 8.38636, "time": 0.27976}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.03545, "loss_cls": 0.34681, "loss_bbox": 0.1576, "loss_kps": 7.41847, "loss": 7.92288, "time": 0.27701}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00063, "memory": 2017, "data_time": 0.03731, "loss_cls": 0.34276, "loss_bbox": 0.1503, "loss_kps": 7.25403, "loss": 7.7471, "time": 0.28142}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.03481, "loss_cls": 0.35468, "loss_bbox": 0.15584, "loss_kps": 7.71086, "loss": 8.22138, "time": 0.27772}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00063, "memory": 2017, "data_time": 0.03575, "loss_cls": 0.34354, "loss_bbox": 0.14251, "loss_kps": 6.7107, "loss": 7.19675, "time": 0.27853}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00063, "memory": 2017, "data_time": 0.03763, "loss_cls": 0.35208, "loss_bbox": 0.15482, "loss_kps": 7.87711, "loss": 8.38401, "time": 0.28245}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00063, "memory": 2017, "data_time": 0.03689, "loss_cls": 0.33874, "loss_bbox": 0.14879, "loss_kps": 6.83878, "loss": 7.32631, "time": 0.28076}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00063, "memory": 2017, "data_time": 0.03653, "loss_cls": 0.34632, "loss_bbox": 0.14814, "loss_kps": 6.87543, "loss": 7.36989, "time": 0.27821}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00063, "memory": 2017, "data_time": 0.0367, "loss_cls": 0.33905, "loss_bbox": 0.15038, "loss_kps": 7.26942, "loss": 7.75885, "time": 0.28017}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00063, "memory": 2017, "data_time": 0.03547, "loss_cls": 0.34497, "loss_bbox": 0.15553, "loss_kps": 7.49523, "loss": 7.99572, "time": 0.27846}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00063, "memory": 2017, "data_time": 0.03491, "loss_cls": 0.34923, "loss_bbox": 0.15854, "loss_kps": 8.29963, "loss": 8.80739, "time": 0.27606}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00063, "memory": 2017, "data_time": 0.03621, "loss_cls": 0.3535, "loss_bbox": 0.15079, "loss_kps": 6.99043, "loss": 7.49472, "time": 0.27825}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00063, "memory": 2017, "data_time": 0.11611, "loss_cls": 0.3603, "loss_bbox": 0.1535, "loss_kps": 7.31937, "loss": 7.83316, "time": 0.36087}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.03478, "loss_cls": 0.35208, "loss_bbox": 0.14992, "loss_kps": 7.54322, "loss": 8.04522, "time": 0.27642}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00063, "memory": 2017, "data_time": 0.03646, "loss_cls": 0.33739, "loss_bbox": 0.15277, "loss_kps": 6.68401, "loss": 7.17417, "time": 0.27895}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03628, "loss_cls": 0.34346, "loss_bbox": 0.14478, "loss_kps": 6.29059, "loss": 6.77883, "time": 0.2783}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00063, "memory": 2017, "data_time": 0.03761, "loss_cls": 0.34717, "loss_bbox": 0.14578, "loss_kps": 7.39756, "loss": 7.89051, "time": 0.28112}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03524, "loss_cls": 0.35596, "loss_bbox": 0.14405, "loss_kps": 7.36044, "loss": 7.86044, "time": 0.27781}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00063, "memory": 2017, "data_time": 0.0366, "loss_cls": 0.35124, "loss_bbox": 0.14694, "loss_kps": 6.96306, "loss": 7.46125, "time": 0.27943}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.03626, "loss_cls": 0.34497, "loss_bbox": 0.15065, "loss_kps": 7.2138, "loss": 7.70942, "time": 0.28348}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.00063, "memory": 2017, "data_time": 0.03662, "loss_cls": 0.34151, "loss_bbox": 0.14756, "loss_kps": 6.3038, "loss": 6.79287, "time": 0.27874}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.03684, "loss_cls": 0.34848, "loss_bbox": 0.14647, "loss_kps": 7.44494, "loss": 7.93989, "time": 0.27968}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.00063, "memory": 2017, "data_time": 0.03794, "loss_cls": 0.34834, "loss_bbox": 0.14848, "loss_kps": 6.88563, "loss": 7.38244, "time": 0.28278}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.03664, "loss_cls": 0.33323, "loss_bbox": 0.14842, "loss_kps": 6.84112, "loss": 7.32277, "time": 0.28051}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.00063, "memory": 2017, "data_time": 0.03616, "loss_cls": 0.33031, "loss_bbox": 0.15152, "loss_kps": 7.04002, "loss": 7.52186, "time": 0.27969}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.03601, "loss_cls": 0.34995, "loss_bbox": 0.15071, "loss_kps": 8.55775, "loss": 9.0584, "time": 0.27823}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.00063, "memory": 2017, "data_time": 0.03464, "loss_cls": 0.35262, "loss_bbox": 0.1552, "loss_kps": 6.73837, "loss": 7.2462, "time": 0.27543}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.038, "loss_cls": 0.35128, "loss_bbox": 0.1467, "loss_kps": 7.15385, "loss": 7.65183, "time": 0.28462}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.00063, "memory": 2017, "data_time": 0.03658, "loss_cls": 0.32571, "loss_bbox": 0.15038, "loss_kps": 6.61318, "loss": 7.08928, "time": 0.28034}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.03739, "loss_cls": 0.36934, "loss_bbox": 0.15113, "loss_kps": 7.76039, "loss": 8.28087, "time": 0.28306}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.00063, "memory": 2017, "data_time": 0.03632, "loss_cls": 0.34757, "loss_bbox": 0.15019, "loss_kps": 6.66758, "loss": 7.16534, "time": 0.27842}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.00063, "memory": 2017, "data_time": 0.03603, "loss_cls": 0.34799, "loss_bbox": 0.14692, "loss_kps": 6.86977, "loss": 7.36468, "time": 0.27833}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.00063, "memory": 2017, "data_time": 0.03605, "loss_cls": 0.35258, "loss_bbox": 0.15261, "loss_kps": 8.17745, "loss": 8.68264, "time": 0.27727}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.00063, "memory": 2017, "data_time": 0.03622, "loss_cls": 0.35846, "loss_bbox": 0.15327, "loss_kps": 8.3037, "loss": 8.81543, "time": 0.27824}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 0.00063, "memory": 2017, "data_time": 0.03733, "loss_cls": 0.35769, "loss_bbox": 0.1531, "loss_kps": 7.26509, "loss": 7.77589, "time": 0.28327}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.00063, "memory": 2017, "data_time": 0.0383, "loss_cls": 0.34792, "loss_bbox": 0.15057, "loss_kps": 7.10423, "loss": 7.60271, "time": 0.28389}
{"mode": "train", "epoch": 2, "iter": 1250, "lr": 0.00063, "memory": 2017, "data_time": 0.03451, "loss_cls": 0.34727, "loss_bbox": 0.15183, "loss_kps": 6.91988, "loss": 7.41898, "time": 0.2753}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 0.00063, "memory": 2017, "data_time": 0.03631, "loss_cls": 0.34086, "loss_bbox": 0.15086, "loss_kps": 6.88396, "loss": 7.37568, "time": 0.27728}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00063, "memory": 2017, "data_time": 0.11514, "loss_cls": 0.3462, "loss_bbox": 0.14796, "loss_kps": 7.25058, "loss": 7.74473, "time": 0.35814}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.0353, "loss_cls": 0.34759, "loss_bbox": 0.14797, "loss_kps": 7.06301, "loss": 7.55857, "time": 0.27412}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.00063, "memory": 2017, "data_time": 0.03587, "loss_cls": 0.34252, "loss_bbox": 0.15121, "loss_kps": 7.38254, "loss": 7.87627, "time": 0.27831}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03515, "loss_cls": 0.34571, "loss_bbox": 0.14536, "loss_kps": 6.89879, "loss": 7.38986, "time": 0.27513}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00063, "memory": 2017, "data_time": 0.03683, "loss_cls": 0.34403, "loss_bbox": 0.15037, "loss_kps": 7.5151, "loss": 8.00949, "time": 0.27756}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03495, "loss_cls": 0.34886, "loss_bbox": 0.15278, "loss_kps": 7.35274, "loss": 7.85438, "time": 0.27676}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.00063, "memory": 2017, "data_time": 0.03687, "loss_cls": 0.35035, "loss_bbox": 0.14814, "loss_kps": 7.23106, "loss": 7.72955, "time": 0.28096}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.03592, "loss_cls": 0.35544, "loss_bbox": 0.14891, "loss_kps": 7.74761, "loss": 8.25195, "time": 0.2772}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00063, "memory": 2017, "data_time": 0.03714, "loss_cls": 0.35937, "loss_bbox": 0.1537, "loss_kps": 7.99687, "loss": 8.50994, "time": 0.28038}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.0352, "loss_cls": 0.3345, "loss_bbox": 0.14362, "loss_kps": 6.70323, "loss": 7.18136, "time": 0.27342}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00063, "memory": 2017, "data_time": 0.0373, "loss_cls": 0.33963, "loss_bbox": 0.14657, "loss_kps": 6.40584, "loss": 6.89204, "time": 0.28274}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.03708, "loss_cls": 0.34123, "loss_bbox": 0.14331, "loss_kps": 6.59343, "loss": 7.07797, "time": 0.28017}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.00063, "memory": 2017, "data_time": 0.03755, "loss_cls": 0.33892, "loss_bbox": 0.14318, "loss_kps": 6.45573, "loss": 6.93783, "time": 0.28354}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.03731, "loss_cls": 0.3437, "loss_bbox": 0.14517, "loss_kps": 6.7762, "loss": 7.26508, "time": 0.28188}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.00063, "memory": 2017, "data_time": 0.03749, "loss_cls": 0.35509, "loss_bbox": 0.14037, "loss_kps": 6.62994, "loss": 7.12539, "time": 0.28119}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.03536, "loss_cls": 0.34856, "loss_bbox": 0.14542, "loss_kps": 7.12258, "loss": 7.61656, "time": 0.27624}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 0.00063, "memory": 2017, "data_time": 0.03553, "loss_cls": 0.35923, "loss_bbox": 0.15085, "loss_kps": 7.07123, "loss": 7.5813, "time": 0.27553}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.03634, "loss_cls": 0.34333, "loss_bbox": 0.14634, "loss_kps": 6.85411, "loss": 7.34378, "time": 0.27764}
