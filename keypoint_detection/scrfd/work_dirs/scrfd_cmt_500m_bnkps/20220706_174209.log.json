{"env_info": "sys.platform: linux\nPython: 3.9.11 (main, Mar 29 2022, 19:08:29) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: Tesla T4\nCUDA_HOME: /root/miniconda3/envs/manhdq\nNVCC: Cuda compilation tools, release 11.3, V11.3.58\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.4.0\nMMCV: 1.5.3\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMDetection: 2.7.0+", "config": "optimizer = dict(type='Adam', lr=0.000625, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_mult = 8\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=10,\n    warmup_ratio=0.001,\n    step=[16, 48])\ntotal_epochs = 64\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/manhdq/ID_Card_Information_Extraction/keypoint_detection/scrfd/work_dirs/scrfd_500m_bnkps/epoch_64.pth'\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'RetinaFaceDataset'\ndata_root = '/home/manhdq/ID_Card_Information_Extraction/datasets'\ntrain_root = '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color'\nval_root = '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid'\nimg_norm_cfg = dict(\n    mean=[127.5, 127.5, 127.5], std=[128.0, 128.0, 128.0], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(\n                type='Affine',\n                scale=None,\n                rotate=(-90, 90),\n                shear=None,\n                interpolation=0,\n                fit_output=True)\n        ],\n        p=0.6),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='MotionBlur'),\n            dict(type='GaussianBlur', blur_limit=3)\n        ],\n        p=0.2),\n    dict(type='ToGray', p=0.2)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n    dict(\n        type='RandomSquareCrop',\n        crop_choice=[0.3, 0.45, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0]),\n    dict(type='Resize', img_scale=(640, 640), keep_ratio=False),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical', 'diagonal']),\n    dict(\n        type='PhotoMetricDistortion',\n        brightness_delta=32,\n        contrast_range=(0.5, 1.5),\n        saturation_range=(0.5, 1.5),\n        hue_delta=18),\n    dict(\n        type='Normalize',\n        mean=[127.5, 127.5, 127.5],\n        std=[128.0, 128.0, 128.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_keypointss'\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(640, 640),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='Pad', size=(640, 640), pad_val=0),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=8,\n    train=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color/images',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(\n                                type='Affine',\n                                scale=None,\n                                rotate=(-90, 90),\n                                shear=None,\n                                interpolation=0,\n                                fit_output=True)\n                        ],\n                        p=0.6),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='MotionBlur'),\n                            dict(type='GaussianBlur', blur_limit=3)\n                        ],\n                        p=0.2),\n                    dict(type='ToGray', p=0.2)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.5),\n                keypoint_params=dict(type='KeypointParams', format='xy'),\n                refine_bbox_from_keypoint=True,\n                keymap=dict(\n                    img='image', gt_bboxes='bboxes',\n                    gt_keypointss='keypoints'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='RandomSquareCrop',\n                crop_choice=[\n                    0.3, 0.45, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0\n                ]),\n            dict(type='Resize', img_scale=(640, 640), keep_ratio=False),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical', 'diagonal']),\n            dict(\n                type='PhotoMetricDistortion',\n                brightness_delta=32,\n                contrast_range=(0.5, 1.5),\n                saturation_range=(0.5, 1.5),\n                hue_delta=18),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_keypointss'\n                ])\n        ]),\n    val=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(640, 640), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(640, 640), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nmodel = dict(\n    type='SCRFD',\n    backbone=dict(\n        type='MobileNetV1',\n        block_cfg=dict(\n            stage_blocks=(2, 3, 2, 6), stage_planes=[16, 16, 40, 72, 152,\n                                                     288])),\n    neck=dict(\n        type='PAFPN',\n        in_channels=[40, 72, 152, 288],\n        out_channels=16,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=3),\n    bbox_head=dict(\n        type='SCRFDHead',\n        num_classes=1,\n        in_channels=16,\n        stacked_convs=2,\n        feat_channels=64,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        cls_reg_share=True,\n        strides_share=False,\n        dw_conv=True,\n        scale_mode=0,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            scales=[1, 2],\n            base_sizes=[16, 64, 256],\n            strides=[8, 16, 32]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=False,\n        reg_max=8,\n        loss_bbox=dict(type='DIoULoss', loss_weight=1.0),\n        use_kps=True,\n        loss_kps=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.5),\n        train_cfg=dict(\n            assigner=dict(type='ATSSAssigner', topk=9),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        test_cfg=dict(\n            nms_pre=-1,\n            min_bbox_size=0,\n            score_thr=0.02,\n            nms=dict(type='nms', iou_threshold=0.45),\n            max_per_img=-1)))\ntrain_cfg = dict(\n    assigner=dict(type='ATSSAssigner', topk=9),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=-1,\n    min_bbox_size=0,\n    score_thr=0.02,\n    nms=dict(type='nms', iou_threshold=0.45),\n    max_per_img=-1)\nepoch_multi = 1\nevaluation = dict(interval=5, metric='mAP')\nwork_dir = './work_dirs/scrfd_cmt_500m_bnkps'\ngpu_ids = range(0, 1)\n", "seed": 42, "exp_name": "scrfd_cmt_500m_bnkps.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00063, "memory": 2017, "data_time": 0.11385, "loss_cls": 0.33897, "loss_bbox": 0.14819, "loss_kps": 7.26786, "loss": 7.75502, "time": 0.36033}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.03817, "loss_cls": 0.34029, "loss_bbox": 0.15596, "loss_kps": 7.57689, "loss": 8.07314, "time": 0.2815}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00063, "memory": 2017, "data_time": 0.03364, "loss_cls": 0.32792, "loss_bbox": 0.15584, "loss_kps": 7.70467, "loss": 8.18844, "time": 0.26955}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03402, "loss_cls": 0.33714, "loss_bbox": 0.15702, "loss_kps": 8.09906, "loss": 8.59323, "time": 0.27251}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00063, "memory": 2017, "data_time": 0.036, "loss_cls": 0.34764, "loss_bbox": 0.15834, "loss_kps": 7.59347, "loss": 8.09945, "time": 0.27968}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03455, "loss_cls": 0.34736, "loss_bbox": 0.1472, "loss_kps": 7.51047, "loss": 8.00503, "time": 0.2743}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00063, "memory": 2017, "data_time": 0.03696, "loss_cls": 0.33747, "loss_bbox": 0.15452, "loss_kps": 7.6112, "loss": 8.10319, "time": 0.28072}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.03655, "loss_cls": 0.34093, "loss_bbox": 0.14749, "loss_kps": 6.66713, "loss": 7.15556, "time": 0.28109}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00063, "memory": 2017, "data_time": 0.03538, "loss_cls": 0.33201, "loss_bbox": 0.15011, "loss_kps": 7.8453, "loss": 8.32742, "time": 0.27428}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.03416, "loss_cls": 0.3427, "loss_bbox": 0.14632, "loss_kps": 7.79605, "loss": 8.28506, "time": 0.27405}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00063, "memory": 2017, "data_time": 0.03558, "loss_cls": 0.34669, "loss_bbox": 0.14507, "loss_kps": 7.00544, "loss": 7.4972, "time": 0.27569}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.03524, "loss_cls": 0.34736, "loss_bbox": 0.15405, "loss_kps": 7.71765, "loss": 8.21906, "time": 0.27515}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00063, "memory": 2017, "data_time": 0.0342, "loss_cls": 0.35923, "loss_bbox": 0.15228, "loss_kps": 7.83843, "loss": 8.34994, "time": 0.27228}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.03491, "loss_cls": 0.34501, "loss_bbox": 0.14981, "loss_kps": 7.6507, "loss": 8.14552, "time": 0.27735}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00063, "memory": 2017, "data_time": 0.03767, "loss_cls": 0.36236, "loss_bbox": 0.14923, "loss_kps": 7.89219, "loss": 8.40377, "time": 0.28072}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.03317, "loss_cls": 0.34421, "loss_bbox": 0.15283, "loss_kps": 6.85024, "loss": 7.34727, "time": 0.2741}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00063, "memory": 2017, "data_time": 0.03835, "loss_cls": 0.34441, "loss_bbox": 0.1512, "loss_kps": 7.03081, "loss": 7.52642, "time": 0.27716}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.03502, "loss_cls": 0.34968, "loss_bbox": 0.14905, "loss_kps": 7.18336, "loss": 7.68209, "time": 0.27451}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00063, "memory": 2017, "data_time": 0.03596, "loss_cls": 0.34428, "loss_bbox": 0.1453, "loss_kps": 6.8305, "loss": 7.32008, "time": 0.27975}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00063, "memory": 2017, "data_time": 0.03493, "loss_cls": 0.34973, "loss_bbox": 0.15183, "loss_kps": 8.16208, "loss": 8.66364, "time": 0.27355}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00063, "memory": 2017, "data_time": 0.03484, "loss_cls": 0.34452, "loss_bbox": 0.14873, "loss_kps": 6.72701, "loss": 7.22026, "time": 0.27591}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00063, "memory": 2017, "data_time": 0.03526, "loss_cls": 0.33859, "loss_bbox": 0.15127, "loss_kps": 6.73803, "loss": 7.22789, "time": 0.27668}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00063, "memory": 2017, "data_time": 0.0358, "loss_cls": 0.33065, "loss_bbox": 0.15084, "loss_kps": 7.32061, "loss": 7.80211, "time": 0.27692}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00063, "memory": 2017, "data_time": 0.03805, "loss_cls": 0.33864, "loss_bbox": 0.15431, "loss_kps": 6.86033, "loss": 7.35328, "time": 0.28344}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00063, "memory": 2017, "data_time": 0.03422, "loss_cls": 0.34422, "loss_bbox": 0.15259, "loss_kps": 6.86496, "loss": 7.36178, "time": 0.27232}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00063, "memory": 2017, "data_time": 0.03409, "loss_cls": 0.3526, "loss_bbox": 0.15251, "loss_kps": 7.70626, "loss": 8.21137, "time": 0.2718}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00063, "memory": 2017, "data_time": 0.11576, "loss_cls": 0.36333, "loss_bbox": 0.15554, "loss_kps": 7.85141, "loss": 8.37027, "time": 0.35854}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.0337, "loss_cls": 0.3604, "loss_bbox": 0.14961, "loss_kps": 7.44039, "loss": 7.9504, "time": 0.27369}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00063, "memory": 2017, "data_time": 0.03414, "loss_cls": 0.3381, "loss_bbox": 0.15202, "loss_kps": 6.58332, "loss": 7.07344, "time": 0.27053}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03432, "loss_cls": 0.34127, "loss_bbox": 0.15006, "loss_kps": 6.49685, "loss": 6.98818, "time": 0.27561}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00063, "memory": 2017, "data_time": 0.03743, "loss_cls": 0.34934, "loss_bbox": 0.15037, "loss_kps": 8.11509, "loss": 8.61479, "time": 0.28091}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03317, "loss_cls": 0.3551, "loss_bbox": 0.14704, "loss_kps": 7.63121, "loss": 8.13335, "time": 0.27176}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00063, "memory": 2017, "data_time": 0.03515, "loss_cls": 0.34613, "loss_bbox": 0.14928, "loss_kps": 7.17687, "loss": 7.67228, "time": 0.27374}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.0357, "loss_cls": 0.35702, "loss_bbox": 0.15599, "loss_kps": 7.54219, "loss": 8.0552, "time": 0.27755}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.00063, "memory": 2017, "data_time": 0.03665, "loss_cls": 0.34053, "loss_bbox": 0.15007, "loss_kps": 6.64519, "loss": 7.13579, "time": 0.27646}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.03463, "loss_cls": 0.34915, "loss_bbox": 0.14767, "loss_kps": 7.23113, "loss": 7.72795, "time": 0.27167}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.00063, "memory": 2017, "data_time": 0.03462, "loss_cls": 0.34555, "loss_bbox": 0.15022, "loss_kps": 7.55394, "loss": 8.04971, "time": 0.27325}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.03526, "loss_cls": 0.33283, "loss_bbox": 0.15207, "loss_kps": 7.40244, "loss": 7.88735, "time": 0.27758}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.00063, "memory": 2017, "data_time": 0.03622, "loss_cls": 0.33803, "loss_bbox": 0.15086, "loss_kps": 6.71459, "loss": 7.20349, "time": 0.27945}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.03478, "loss_cls": 0.35418, "loss_bbox": 0.14911, "loss_kps": 7.83475, "loss": 8.33804, "time": 0.27611}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.00063, "memory": 2017, "data_time": 0.03627, "loss_cls": 0.35269, "loss_bbox": 0.14584, "loss_kps": 6.71115, "loss": 7.20968, "time": 0.27883}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.0363, "loss_cls": 0.36604, "loss_bbox": 0.14649, "loss_kps": 7.61586, "loss": 8.1284, "time": 0.27804}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.00063, "memory": 2017, "data_time": 0.03679, "loss_cls": 0.33024, "loss_bbox": 0.15291, "loss_kps": 6.87931, "loss": 7.36246, "time": 0.28011}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.03679, "loss_cls": 0.35967, "loss_bbox": 0.15408, "loss_kps": 7.75084, "loss": 8.2646, "time": 0.27965}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.00063, "memory": 2017, "data_time": 0.03712, "loss_cls": 0.35291, "loss_bbox": 0.14781, "loss_kps": 6.62426, "loss": 7.12499, "time": 0.28228}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.00063, "memory": 2017, "data_time": 0.03747, "loss_cls": 0.3468, "loss_bbox": 0.14624, "loss_kps": 6.86823, "loss": 7.36127, "time": 0.27865}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.00063, "memory": 2017, "data_time": 0.03451, "loss_cls": 0.35124, "loss_bbox": 0.14833, "loss_kps": 7.58402, "loss": 8.08359, "time": 0.27604}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.00063, "memory": 2017, "data_time": 0.03471, "loss_cls": 0.35811, "loss_bbox": 0.15027, "loss_kps": 7.68077, "loss": 8.18915, "time": 0.2753}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 0.00063, "memory": 2017, "data_time": 0.03386, "loss_cls": 0.3545, "loss_bbox": 0.15346, "loss_kps": 7.59742, "loss": 8.10538, "time": 0.27027}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.00063, "memory": 2017, "data_time": 0.03737, "loss_cls": 0.34529, "loss_bbox": 0.15192, "loss_kps": 7.12795, "loss": 7.62516, "time": 0.27612}
{"mode": "train", "epoch": 2, "iter": 1250, "lr": 0.00063, "memory": 2017, "data_time": 0.03346, "loss_cls": 0.35021, "loss_bbox": 0.15002, "loss_kps": 6.96789, "loss": 7.46811, "time": 0.27363}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 0.00063, "memory": 2017, "data_time": 0.03378, "loss_cls": 0.34696, "loss_bbox": 0.1487, "loss_kps": 7.21819, "loss": 7.71385, "time": 0.27207}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00063, "memory": 2017, "data_time": 0.11577, "loss_cls": 0.35474, "loss_bbox": 0.14718, "loss_kps": 7.06558, "loss": 7.5675, "time": 0.35956}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.03363, "loss_cls": 0.34931, "loss_bbox": 0.15012, "loss_kps": 6.95415, "loss": 7.45358, "time": 0.27317}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.00063, "memory": 2017, "data_time": 0.0345, "loss_cls": 0.34672, "loss_bbox": 0.14931, "loss_kps": 7.01379, "loss": 7.50982, "time": 0.27609}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03512, "loss_cls": 0.34432, "loss_bbox": 0.14481, "loss_kps": 7.38604, "loss": 7.87517, "time": 0.27594}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00063, "memory": 2017, "data_time": 0.03581, "loss_cls": 0.35011, "loss_bbox": 0.15054, "loss_kps": 7.74838, "loss": 8.24903, "time": 0.27293}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03431, "loss_cls": 0.35108, "loss_bbox": 0.155, "loss_kps": 7.69407, "loss": 8.20015, "time": 0.27514}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.00063, "memory": 2017, "data_time": 0.03565, "loss_cls": 0.34622, "loss_bbox": 0.14745, "loss_kps": 7.12287, "loss": 7.61653, "time": 0.276}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.03578, "loss_cls": 0.35062, "loss_bbox": 0.1482, "loss_kps": 7.28654, "loss": 7.78536, "time": 0.27699}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00063, "memory": 2017, "data_time": 0.03719, "loss_cls": 0.3596, "loss_bbox": 0.15361, "loss_kps": 7.42408, "loss": 7.9373, "time": 0.27876}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.03328, "loss_cls": 0.33342, "loss_bbox": 0.14497, "loss_kps": 6.78, "loss": 7.2584, "time": 0.27315}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00063, "memory": 2017, "data_time": 0.03451, "loss_cls": 0.33634, "loss_bbox": 0.14457, "loss_kps": 7.04478, "loss": 7.5257, "time": 0.27445}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.03876, "loss_cls": 0.34104, "loss_bbox": 0.1464, "loss_kps": 7.14737, "loss": 7.6348, "time": 0.28049}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.00063, "memory": 2017, "data_time": 0.04139, "loss_cls": 0.34772, "loss_bbox": 0.14605, "loss_kps": 6.64002, "loss": 7.13379, "time": 0.30682}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.04995, "loss_cls": 0.34713, "loss_bbox": 0.15098, "loss_kps": 7.24541, "loss": 7.74352, "time": 0.3416}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.00063, "memory": 2017, "data_time": 0.03419, "loss_cls": 0.35508, "loss_bbox": 0.14613, "loss_kps": 6.81634, "loss": 7.31754, "time": 0.28988}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.03472, "loss_cls": 0.35308, "loss_bbox": 0.15039, "loss_kps": 7.06504, "loss": 7.56851, "time": 0.27283}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 0.00063, "memory": 2017, "data_time": 0.03348, "loss_cls": 0.35886, "loss_bbox": 0.14998, "loss_kps": 7.03657, "loss": 7.54542, "time": 0.2853}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.03345, "loss_cls": 0.34761, "loss_bbox": 0.14856, "loss_kps": 6.8946, "loss": 7.39077, "time": 0.27439}
