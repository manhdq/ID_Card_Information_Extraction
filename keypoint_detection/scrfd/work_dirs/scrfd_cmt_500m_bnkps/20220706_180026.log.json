{"env_info": "sys.platform: linux\nPython: 3.9.11 (main, Mar 29 2022, 19:08:29) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: Tesla T4\nCUDA_HOME: /root/miniconda3/envs/manhdq\nNVCC: Cuda compilation tools, release 11.3, V11.3.58\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.4.0\nMMCV: 1.5.3\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMDetection: 2.7.0+", "config": "optimizer = dict(type='Adam', lr=0.000625, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_mult = 8\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=10,\n    warmup_ratio=0.001,\n    step=[16, 48])\ntotal_epochs = 64\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/manhdq/ID_Card_Information_Extraction/keypoint_detection/scrfd/work_dirs/scrfd_500m_bnkps/epoch_64.pth'\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'RetinaFaceDataset'\ndata_root = '/home/manhdq/ID_Card_Information_Extraction/datasets'\ntrain_root = '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color'\nval_root = '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid'\nimg_norm_cfg = dict(\n    mean=[127.5, 127.5, 127.5], std=[128.0, 128.0, 128.0], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(\n                type='Affine',\n                scale=None,\n                rotate=(-90, 90),\n                shear=None,\n                interpolation=0,\n                fit_output=True)\n        ],\n        p=0.6),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='MotionBlur'),\n            dict(type='GaussianBlur', blur_limit=3)\n        ],\n        p=0.2),\n    dict(type='ToGray', p=0.2)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n    dict(\n        type='RandomSquareCrop',\n        crop_choice=[0.3, 0.45, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0]),\n    dict(type='Resize', img_scale=(640, 640), keep_ratio=False),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical', 'diagonal']),\n    dict(\n        type='PhotoMetricDistortion',\n        brightness_delta=32,\n        contrast_range=(0.5, 1.5),\n        saturation_range=(0.5, 1.5),\n        hue_delta=18),\n    dict(\n        type='Normalize',\n        mean=[127.5, 127.5, 127.5],\n        std=[128.0, 128.0, 128.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n            'gt_keypointss'\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(640, 640),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='Pad', size=(640, 640), pad_val=0),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=8,\n    train=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/poisson_color/images',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True, with_keypoints=True),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(\n                                type='Affine',\n                                scale=None,\n                                rotate=(-90, 90),\n                                shear=None,\n                                interpolation=0,\n                                fit_output=True)\n                        ],\n                        p=0.6),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='MotionBlur'),\n                            dict(type='GaussianBlur', blur_limit=3)\n                        ],\n                        p=0.2),\n                    dict(type='ToGray', p=0.2)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.5),\n                keypoint_params=dict(type='KeypointParams', format='xy'),\n                refine_bbox_from_keypoint=True,\n                keymap=dict(\n                    img='image', gt_bboxes='bboxes',\n                    gt_keypointss='keypoints'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='RandomSquareCrop',\n                crop_choice=[\n                    0.3, 0.45, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0\n                ]),\n            dict(type='Resize', img_scale=(640, 640), keep_ratio=False),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical', 'diagonal']),\n            dict(\n                type='PhotoMetricDistortion',\n                brightness_delta=32,\n                contrast_range=(0.5, 1.5),\n                saturation_range=(0.5, 1.5),\n                hue_delta=18),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[128.0, 128.0, 128.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_ignore',\n                    'gt_keypointss'\n                ])\n        ]),\n    val=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(640, 640), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='RetinaFaceDataset',\n        ann_file=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/annotations.txt',\n        img_prefix=\n        '/home/manhdq/ID_Card_Information_Extraction/datasets/cmt_valid/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[128.0, 128.0, 128.0],\n                        to_rgb=True),\n                    dict(type='Pad', size=(640, 640), pad_val=0),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nmodel = dict(\n    type='SCRFD',\n    backbone=dict(\n        type='MobileNetV1',\n        block_cfg=dict(\n            stage_blocks=(2, 3, 2, 6), stage_planes=[16, 16, 40, 72, 152,\n                                                     288])),\n    neck=dict(\n        type='PAFPN',\n        in_channels=[40, 72, 152, 288],\n        out_channels=16,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=3),\n    bbox_head=dict(\n        type='SCRFDHead',\n        num_classes=1,\n        in_channels=16,\n        stacked_convs=2,\n        feat_channels=64,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        cls_reg_share=True,\n        strides_share=False,\n        dw_conv=True,\n        scale_mode=0,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            scales=[1, 2],\n            base_sizes=[16, 64, 256],\n            strides=[8, 16, 32]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=False,\n        reg_max=8,\n        loss_bbox=dict(type='DIoULoss', loss_weight=1.0),\n        use_kps=True,\n        loss_kps=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.5),\n        train_cfg=dict(\n            assigner=dict(type='ATSSAssigner', topk=9),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        test_cfg=dict(\n            nms_pre=-1,\n            min_bbox_size=0,\n            score_thr=0.02,\n            nms=dict(type='nms', iou_threshold=0.45),\n            max_per_img=-1)))\ntrain_cfg = dict(\n    assigner=dict(type='ATSSAssigner', topk=9),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=-1,\n    min_bbox_size=0,\n    score_thr=0.02,\n    nms=dict(type='nms', iou_threshold=0.45),\n    max_per_img=-1)\nepoch_multi = 1\nevaluation = dict(interval=5, metric='mAP')\nwork_dir = './work_dirs/scrfd_cmt_500m_bnkps'\ngpu_ids = range(0, 1)\n", "seed": 42, "exp_name": "scrfd_cmt_500m_bnkps.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00063, "memory": 2017, "data_time": 0.11524, "loss_cls": 0.33804, "loss_bbox": 0.14789, "loss_kps": 7.2812, "loss": 7.76713, "time": 0.35922}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.03346, "loss_cls": 0.34151, "loss_bbox": 0.15421, "loss_kps": 7.83889, "loss": 8.33462, "time": 0.27102}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00063, "memory": 2017, "data_time": 0.03422, "loss_cls": 0.32765, "loss_bbox": 0.15227, "loss_kps": 7.45323, "loss": 7.93315, "time": 0.27265}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03549, "loss_cls": 0.33516, "loss_bbox": 0.15559, "loss_kps": 7.94981, "loss": 8.44056, "time": 0.27332}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00063, "memory": 2017, "data_time": 0.03558, "loss_cls": 0.34923, "loss_bbox": 0.15109, "loss_kps": 7.17564, "loss": 7.67596, "time": 0.27396}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03384, "loss_cls": 0.33805, "loss_bbox": 0.14668, "loss_kps": 6.91454, "loss": 7.39928, "time": 0.26731}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00063, "memory": 2017, "data_time": 0.03486, "loss_cls": 0.32511, "loss_bbox": 0.15088, "loss_kps": 7.56755, "loss": 8.04354, "time": 0.27441}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.03486, "loss_cls": 0.32766, "loss_bbox": 0.14341, "loss_kps": 6.53021, "loss": 7.00127, "time": 0.27236}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00063, "memory": 2017, "data_time": 0.03767, "loss_cls": 0.32675, "loss_bbox": 0.14611, "loss_kps": 7.81794, "loss": 8.2908, "time": 0.28084}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.03698, "loss_cls": 0.35043, "loss_bbox": 0.14972, "loss_kps": 8.42801, "loss": 8.92816, "time": 0.28127}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00063, "memory": 2017, "data_time": 0.03722, "loss_cls": 0.34392, "loss_bbox": 0.15018, "loss_kps": 7.37984, "loss": 7.87394, "time": 0.28028}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.03582, "loss_cls": 0.35611, "loss_bbox": 0.15681, "loss_kps": 7.79558, "loss": 8.3085, "time": 0.27752}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00063, "memory": 2017, "data_time": 0.03948, "loss_cls": 0.36223, "loss_bbox": 0.1528, "loss_kps": 8.36408, "loss": 8.87912, "time": 0.27867}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.0358, "loss_cls": 0.34658, "loss_bbox": 0.14884, "loss_kps": 8.0375, "loss": 8.53292, "time": 0.27454}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00063, "memory": 2017, "data_time": 0.03867, "loss_cls": 0.35909, "loss_bbox": 0.15238, "loss_kps": 8.25706, "loss": 8.76853, "time": 0.2793}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.03354, "loss_cls": 0.34587, "loss_bbox": 0.15159, "loss_kps": 7.34986, "loss": 7.84732, "time": 0.27308}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00063, "memory": 2017, "data_time": 0.03552, "loss_cls": 0.34311, "loss_bbox": 0.15226, "loss_kps": 7.54363, "loss": 8.039, "time": 0.27584}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.03642, "loss_cls": 0.3589, "loss_bbox": 0.15328, "loss_kps": 7.679, "loss": 8.19117, "time": 0.27836}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00063, "memory": 2017, "data_time": 0.03775, "loss_cls": 0.34855, "loss_bbox": 0.14444, "loss_kps": 6.50504, "loss": 6.99803, "time": 0.28018}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00063, "memory": 2017, "data_time": 0.03552, "loss_cls": 0.35023, "loss_bbox": 0.15075, "loss_kps": 7.93081, "loss": 8.43179, "time": 0.27788}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00063, "memory": 2017, "data_time": 0.0341, "loss_cls": 0.33529, "loss_bbox": 0.15047, "loss_kps": 6.75648, "loss": 7.24224, "time": 0.27465}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00063, "memory": 2017, "data_time": 0.03503, "loss_cls": 0.34225, "loss_bbox": 0.15035, "loss_kps": 6.97129, "loss": 7.4639, "time": 0.27362}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00063, "memory": 2017, "data_time": 0.03796, "loss_cls": 0.3447, "loss_bbox": 0.14966, "loss_kps": 7.50379, "loss": 7.99815, "time": 0.28208}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00063, "memory": 2017, "data_time": 0.03436, "loss_cls": 0.34348, "loss_bbox": 0.15621, "loss_kps": 7.30449, "loss": 7.80418, "time": 0.27647}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00063, "memory": 2017, "data_time": 0.03594, "loss_cls": 0.34268, "loss_bbox": 0.15374, "loss_kps": 7.48252, "loss": 7.97894, "time": 0.28071}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00063, "memory": 2017, "data_time": 0.03761, "loss_cls": 0.34237, "loss_bbox": 0.14968, "loss_kps": 7.05672, "loss": 7.54877, "time": 0.2782}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00063, "memory": 2017, "data_time": 0.11641, "loss_cls": 0.35252, "loss_bbox": 0.15315, "loss_kps": 7.63932, "loss": 8.14498, "time": 0.36214}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.03483, "loss_cls": 0.35772, "loss_bbox": 0.14997, "loss_kps": 7.62532, "loss": 8.133, "time": 0.27789}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00063, "memory": 2017, "data_time": 0.03749, "loss_cls": 0.33336, "loss_bbox": 0.14949, "loss_kps": 6.55866, "loss": 7.04152, "time": 0.28024}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03584, "loss_cls": 0.34035, "loss_bbox": 0.14826, "loss_kps": 6.62261, "loss": 7.11123, "time": 0.27507}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00063, "memory": 2017, "data_time": 0.0385, "loss_cls": 0.35535, "loss_bbox": 0.1492, "loss_kps": 7.6237, "loss": 8.12825, "time": 0.28121}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03547, "loss_cls": 0.36156, "loss_bbox": 0.1452, "loss_kps": 7.51407, "loss": 8.02083, "time": 0.27777}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00063, "memory": 2017, "data_time": 0.03728, "loss_cls": 0.35231, "loss_bbox": 0.15036, "loss_kps": 7.24373, "loss": 7.74641, "time": 0.28047}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.037, "loss_cls": 0.3595, "loss_bbox": 0.15267, "loss_kps": 7.19788, "loss": 7.71005, "time": 0.2804}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.00063, "memory": 2017, "data_time": 0.0383, "loss_cls": 0.33791, "loss_bbox": 0.1485, "loss_kps": 6.688, "loss": 7.17441, "time": 0.28416}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.0365, "loss_cls": 0.352, "loss_bbox": 0.14665, "loss_kps": 7.31629, "loss": 7.81495, "time": 0.27858}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.00063, "memory": 2017, "data_time": 0.0363, "loss_cls": 0.35065, "loss_bbox": 0.15025, "loss_kps": 7.40263, "loss": 7.90353, "time": 0.27969}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.03677, "loss_cls": 0.33406, "loss_bbox": 0.15038, "loss_kps": 6.82981, "loss": 7.31425, "time": 0.27839}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.00063, "memory": 2017, "data_time": 0.03791, "loss_cls": 0.3322, "loss_bbox": 0.14929, "loss_kps": 6.49305, "loss": 6.97454, "time": 0.28119}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.03862, "loss_cls": 0.35016, "loss_bbox": 0.14697, "loss_kps": 7.70836, "loss": 8.20549, "time": 0.2846}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.00063, "memory": 2017, "data_time": 0.03867, "loss_cls": 0.35108, "loss_bbox": 0.15358, "loss_kps": 6.88552, "loss": 7.39018, "time": 0.28614}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.03737, "loss_cls": 0.35676, "loss_bbox": 0.14472, "loss_kps": 6.66571, "loss": 7.16719, "time": 0.28117}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.00063, "memory": 2017, "data_time": 0.03806, "loss_cls": 0.32539, "loss_bbox": 0.14788, "loss_kps": 6.7392, "loss": 7.21247, "time": 0.28427}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.03805, "loss_cls": 0.36253, "loss_bbox": 0.14926, "loss_kps": 7.63289, "loss": 8.14468, "time": 0.28152}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.00063, "memory": 2017, "data_time": 0.03796, "loss_cls": 0.35222, "loss_bbox": 0.15141, "loss_kps": 7.19542, "loss": 7.69906, "time": 0.28197}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.00063, "memory": 2017, "data_time": 0.03892, "loss_cls": 0.3479, "loss_bbox": 0.14661, "loss_kps": 7.00769, "loss": 7.5022, "time": 0.28562}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.00063, "memory": 2017, "data_time": 0.03764, "loss_cls": 0.34909, "loss_bbox": 0.14832, "loss_kps": 7.35854, "loss": 7.85595, "time": 0.28171}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.00063, "memory": 2017, "data_time": 0.03882, "loss_cls": 0.35024, "loss_bbox": 0.147, "loss_kps": 7.32706, "loss": 7.82429, "time": 0.28444}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 0.00063, "memory": 2017, "data_time": 0.03686, "loss_cls": 0.35086, "loss_bbox": 0.1492, "loss_kps": 6.55857, "loss": 7.05863, "time": 0.28077}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.00063, "memory": 2017, "data_time": 0.03606, "loss_cls": 0.34086, "loss_bbox": 0.1461, "loss_kps": 6.74093, "loss": 7.22789, "time": 0.2786}
{"mode": "train", "epoch": 2, "iter": 1250, "lr": 0.00063, "memory": 2017, "data_time": 0.03785, "loss_cls": 0.34122, "loss_bbox": 0.14763, "loss_kps": 6.86503, "loss": 7.35389, "time": 0.28326}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 0.00063, "memory": 2017, "data_time": 0.03662, "loss_cls": 0.3419, "loss_bbox": 0.14854, "loss_kps": 6.96286, "loss": 7.4533, "time": 0.27847}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00063, "memory": 2017, "data_time": 0.11568, "loss_cls": 0.34589, "loss_bbox": 0.14433, "loss_kps": 6.98864, "loss": 7.47886, "time": 0.35935}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00063, "memory": 2017, "data_time": 0.03603, "loss_cls": 0.34595, "loss_bbox": 0.14802, "loss_kps": 7.1232, "loss": 7.61716, "time": 0.27542}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.00063, "memory": 2017, "data_time": 0.0355, "loss_cls": 0.34409, "loss_bbox": 0.14729, "loss_kps": 6.7037, "loss": 7.19508, "time": 0.27452}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00063, "memory": 2017, "data_time": 0.03516, "loss_cls": 0.33839, "loss_bbox": 0.14616, "loss_kps": 7.12238, "loss": 7.60692, "time": 0.27481}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00063, "memory": 2017, "data_time": 0.03881, "loss_cls": 0.35489, "loss_bbox": 0.15311, "loss_kps": 7.7855, "loss": 8.2935, "time": 0.28201}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.00063, "memory": 2017, "data_time": 0.03575, "loss_cls": 0.34363, "loss_bbox": 0.14926, "loss_kps": 7.49274, "loss": 7.98563, "time": 0.27815}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.00063, "memory": 2017, "data_time": 0.03803, "loss_cls": 0.35201, "loss_bbox": 0.14461, "loss_kps": 7.43306, "loss": 7.92968, "time": 0.2815}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.00063, "memory": 2017, "data_time": 0.03654, "loss_cls": 0.36402, "loss_bbox": 0.15066, "loss_kps": 7.71899, "loss": 8.23367, "time": 0.27778}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00063, "memory": 2017, "data_time": 0.03753, "loss_cls": 0.36734, "loss_bbox": 0.15485, "loss_kps": 7.94763, "loss": 8.46982, "time": 0.28017}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00063, "memory": 2017, "data_time": 0.03695, "loss_cls": 0.33862, "loss_bbox": 0.14332, "loss_kps": 6.93045, "loss": 7.41239, "time": 0.2805}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00063, "memory": 2017, "data_time": 0.03655, "loss_cls": 0.34118, "loss_bbox": 0.15027, "loss_kps": 7.01961, "loss": 7.51106, "time": 0.27635}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.00063, "memory": 2017, "data_time": 0.03782, "loss_cls": 0.33863, "loss_bbox": 0.14605, "loss_kps": 7.13878, "loss": 7.62346, "time": 0.28091}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.00063, "memory": 2017, "data_time": 0.03617, "loss_cls": 0.35269, "loss_bbox": 0.14728, "loss_kps": 7.02673, "loss": 7.5267, "time": 0.28029}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.00063, "memory": 2017, "data_time": 0.03669, "loss_cls": 0.35009, "loss_bbox": 0.14939, "loss_kps": 6.93475, "loss": 7.43424, "time": 0.28115}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.00063, "memory": 2017, "data_time": 0.03649, "loss_cls": 0.36018, "loss_bbox": 0.1449, "loss_kps": 6.8683, "loss": 7.37338, "time": 0.27615}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.00063, "memory": 2017, "data_time": 0.03688, "loss_cls": 0.3622, "loss_bbox": 0.14782, "loss_kps": 7.30218, "loss": 7.8122, "time": 0.2782}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 0.00063, "memory": 2017, "data_time": 0.03791, "loss_cls": 0.35727, "loss_bbox": 0.15265, "loss_kps": 6.71911, "loss": 7.22903, "time": 0.28225}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 0.00063, "memory": 2017, "data_time": 0.03776, "loss_cls": 0.35376, "loss_bbox": 0.14933, "loss_kps": 7.00401, "loss": 7.5071, "time": 0.28105}
